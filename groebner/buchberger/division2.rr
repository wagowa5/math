def in(F) {
    D = deg(F,z);
    F = coef(F,D,z);
    T = z^D;
    D = deg(F,y);
    F = coef(F,D,y);
    T = T*y^D;
    D = deg(F,x);
    F = coef(F,D,x);
    T = T*x^D;
    return [F*T,F,T];
}

def in2(F) {
    D = deg(F,x);
    F = coef(F,D,x);
    T = x^D;
    D = deg(F,y);
    F = coef(F,D,y);
    T = T*y^D;
    D = deg(F,z);
    F = coef(F,D,z);
    T = T*z^D;
    return [F*T,F,T];
}

def pot(F) {
    N = length(F);
    I = 0;
    G = F;
    while(I < N) {
        if(F[I] != 0) {
            break;
        }
        I++;
    }


    D = deg(F[I],x);
    F = coef(F[I],D,x);
    T = x^D;
    D = deg(F,y);
    F = coef(F,D,y);
    T = T*y^D;
    D = deg(F,z);
    F = coef(F,D,z);
    T = T*z^D;

    S = [];
    for(J = 0; J < N; J++) {
        if(J == I) {
            S = append(S, [1]);
        }
        else {
            S = append(S, [0]);
        }
    }

    return [[F*T,S],[F,S],[T,S]];
}

def multi_degree(F) {
    F = pot(F);
    T = F[2];

    return([[deg(T[0],x),T[1]], [deg(T[0],y), T[1]], [deg(T[0],z), T[1]], F[1]]);
}

def is_reducible(F,G) {
    DF = multi_degree(F);
    DG = multi_degree(G);

    if(DF[0][1] != DG[0][1]) {
        return [0];
    }

    if(DF[0][0] >= DG[0][0] && DF[1][0] >= DG[1][0] && DF[2][0] >= DG[2][0]) {
        return [red(DF[3][0]/DG[3][0])*x^(DF[0][0]-DG[0][0])*y^(DF[1][0]-DG[1][0])*z^(DF[2][0]-DG[2][0]), DF[0][1]];
    }
    else {
        return [0];
    }
}

/*
def division(F,G) {
    Q = 0; R = F;
    D = is_reducible(R, G);
    while(type(D[0]) != 0) {
        Q = Q+D[0];
        R = R-D[0]*G;
        D = is_reducible(R,G);
    }

    return [Q,R];
}
*/

def reduction2(F,G) {
    Rem = 0;
    
    N = length(G);
    QQ = newvect(N);

    while(F) {
        for(U = 0, L = G, I = 0; L != []; L = cdr(L)) {
            Red = car(L);
            Mono = is_reducible(F, Red);
            //print(Mono);

            if(Mono != 0) {
                U = F-Mono*Red;
                QQ[I] += Mono;
                if(!U) {
                    // Q = matrix_matrix_to_list([QQ]);
                    Q = vtol(QQ);
                    return [Q, Rem];
                }
                break;
            }
            I = I+1;
        }
        if(U) {
            F = U;
        }
        else {
            H = in2(F);
            Rem += H[0];
            F -= H[0];
        }
    }
    // Q = matrix_matrix_to_list([QQ]);
    Q = vtol(QQ);
    return [Q, Rem];
}

end$