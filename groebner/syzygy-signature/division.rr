/* 割り算 */

def in(F) {
    D = deg(F,z);
    F = coef(F,D,z);
    T = z^D;
    D = deg(F,y);
    F = coef(F,D,y);
    T = T*y^D;
    D = deg(F,x);
    F = coef(F,D,x);
    T = T*x^D;
    return [F*T,F,T];
}

def in2(F) {
    D = deg(F,x);
    F = coef(F,D,x);
    T = x^D;
    D = deg(F,y);
    F = coef(F,D,y);
    T = T*y^D;
    D = deg(F,z);
    F = coef(F,D,z);
    T = T*z^D;
    return [F*T,F,T];
}

def multi_degree(F) {
    F = in2(F);
    T = F[2];

    return([deg(T,x), deg(T,y), deg(T,z), F[1]]);
}

def is_reducible(F,G) {
    DF = multi_degree(F);
    DG = multi_degree(G);

    if(DF[0] >= DG[0] && DF[1] >= DG[1] && DF[2] >= DG[2]) {
        return red(DF[3]/DG[3])*x^(DF[0]-DG[0])*y^(DF[1]-DG[1])*z^(DF[2]-DG[2]);
    }
    else {
        return 0;
    }
}

def division(F,G) {
    Q = 0; R = F;
    D = is_reducible(R, G);
    while(type(D) != 0) {
        Q = Q+D;
        R = R-D*G;
        D = is_reducible(R,G);
    }

    return [Q,R];
}

def reduction(F,G) {
    Rem = 0;
    while(F) {
        for(U = 0, L = G; L != []; L = cdr(L)) {
            Red = car(L);
            Mono = is_reducible(F, Red);

            if(Mono != 0) {
                U = F-Mono*Red;
                if(!U) {
                    return Rem;
                }
                break;
            }
        }
        if(U) {
            F = U;
        }
        else {
            H = in2(F);
            Rem += H[0];
            F -= H[0];
        }
    }
    return Rem;
}

def reduction2(F,G) {
    Rem = 0;
    
    QQ = newvect(N = length(G));

    while(F) {
        for(U = 0, L = G, I = 0; L != []; L = cdr(L)) {
            Red = car(L);
            Mono = is_reducible(F, Red);
            //print(Mono);

            if(Mono != 0) {
                U = F-Mono*Red;
                QQ[I] += Mono;
                if(!U) {
		  //matrix_matrix_to_list()
                    return [QQ, Rem];
                }
                break;
            }
            I = I+1;
        }
        if(U) {
            F = U;
        }
        else {
            H = in2(F);
            Rem += H[0];
            F -= H[0];
        }
    }
    return [QQ,Rem];
}
end$