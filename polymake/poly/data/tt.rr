#define SPACE 0x20
#define CodeOfA 0x41
#define CodeOfZ 0x5a
#define CodeOfa 0x61
#define CodeOfz 0x7a
#define CodeOf0 0x30
#define CodeOf9 0x39
#define CodeOfPlus  0x2b
#define CodeOfMinus 0x2d
#define CodeOfMult  0x2a
#define CodeOfDiv   0x2f
#define CodeOfLeftBracket  0x28
#define CodeOfRightBracket  0x29
#define CodeOfLeftB  0x3c
#define CodeOfRightB  0x3e
#define CodeOfSlash  0x2f
#define CodeOfQuart 0x3d

#define LF 0x0a

//#define VARIABLE 1
//#define NUMBER 2

#define VERTICES 1
#define NUMBER 2

extern Ch, Value, Sy, Ptr, Str;


def is_space(C) {
  if(C == SPACE) return 1;
  else return 0;
}

def is_leftb(C) {
  if(C == CodeOfLeftB) return 1;
  return 0;
}

def is_rightb(C) {
  if(C == CodeOfRightB) return 1;
  return 0;
}


def is_alpha(C) {
  if((C >= CodeOfA) && (C <= CodeOfZ)) return 1;
  if((C >= CodeOfa) && (C <= CodeOfz)) return 1;
  return 0;
}

def is_digit(C) {
  if((C >= CodeOf0) && (C <= CodeOf9)) return 1;
  return 0;
}

def is_lf(C) {
  if(C == LF) return 1;
  return 0;
}

def getch() {
  //extern Str,Ptr;
  if(Ptr >= length(Str)-1) return -1;
  else {
    Ptr++;
    return Str[Ptr];
  }
}

def parse() {
  //extern Ptr;
  Ptr = -1;
  Count = 0;
  Buf1 = [];
  //Temp = [];
  //Temp2 = [];
  Ch = getch();
  while(1) {
    //print("parse--------------------");
    //print(Ch);
    while(is_space(Ch)) {
      Ch = getch();
    }

    if(is_leftb(Ch)) {
      parse_b();
    }
    
    if(is_alpha(Ch)) {
      Temp2 = [];
      while(is_lf(Ch) != 1) {
	Temp2 = append(Temp2, [Ch]);
	Ch = getch();
      }
      Temp = asciitostr(Temp2);
      if(Temp == "VERTICES") {
	Sy = VERTICES;
      }
      break;
    }  
    if(is_digit(Ch)) {
      Value = 0;
      Count++;
      if(Sy != NUMBER) {
	Temp = [];
      }
      Sy = NUMBER;
      do {
	Value = Value*10 + (Ch-CodeOf0);
	Ch = getch();
      }while(is_digit(Ch));
      if(Count > 1) {
	Temp = append(Temp, [Value]);
      }
    } else {
      Ch = getch();
    }

    if((is_lf(Ch)) || (Ch == -1)) {
      Ptr = -1;
      break;
    }
    
  }
  
  return Temp;
}

def parse_b() {
  Buf1 = [];
  while(is_rightb(Ch) != 1) {
    Buf1 = append(Buf1, [Ch]);
    Ch = getch();
    if(is_quart(Ch)) {
      parse_q();
    }
  }

  
}
